# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Twigs Deployment Production

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - 'master'

jobs:
  check-docs-merge:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' }}
    outputs:
      checkdoc: ${{ steps.set-output.outputs.checkdoc }}
    steps:
      - name: Check if documentation label exists
        id: set-output
        run: |
          if [[ ${{ github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'documentation') }} == true ]]; then
            echo "checkdoc=true" >> $GITHUB_OUTPUT
          else
            echo "checkdoc=false" >> $GITHUB_OUTPUT
          fi
  build:
    runs-on: ubuntu-latest
    needs: check-docs-merge

    if: ${{ needs.check-docs-merge.outputs.checkdoc == 'true' }}

    env:
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      CLOUDFRONT_DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION }}

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      
      - name: Installing Dependencies
        run: yarn

      - name: Building Twigs Docs
        run: yarn build:docs
        env:
          PLAYGROUND_URL: ${{ vars.PLAYGROUND_URL }}
          PUBLIC_RECAPTCHA_SITE_KEY: ${{ vars.PUBLIC_RECAPTCHA_SITE_KEY }}
          LABS_API_URL: ${{ vars.LABS_API_URL }}
      
      - name: Upload Build to S3
        working-directory: ./packages/docs/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_PRODUCTION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY_PRODUCTION }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

        run: | 
          aws s3 cp ./build s3://${AWS_BUCKET_NAME} --region ${AWS_DEFAULT_REGION} --recursive

      - name: Clearing Cloudfont Cache
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_PRODUCTION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY_PRODUCTION }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        
        run: |
          aws cloudfront create-invalidation --region ${AWS_DEFAULT_REGION} --distribution-id ${CLOUDFRONT_DISTRIBUTION} --paths '/*'